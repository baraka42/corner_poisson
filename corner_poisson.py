# -*- coding: utf-8 -*-
"""corner_poisson.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K_FzNeEK20iNwvg1517gGBhq3G8G-Rlk
"""

import math
import streamlit as st
import pandas as pd

# Função para calcular a distribuição de Poisson
def poisson(k, lambda_):
    return (math.exp(-lambda_) * (lambda_ ** k)) / math.factorial(k)

# Função para ajustar a taxa de escanteios no final do jogo
def ajustar_taxa_final_jogo(minuto, taxa_base, diferenca_gols):
    aumento = 0.0333 + 0.0037 * (minuto - 75)
    if diferenca_gols < 0:
        aumento += 0.05
    elif diferenca_gols == 0:
        aumento += 0.03
    else:
        aumento -= 0.02
    return taxa_base * (1 + aumento)

# Função para calcular odds por minuto
def calcular_odds_por_minuto(escanteios_1t, escanteios_2t_74, diferenca_gols):
    total_escanteios = escanteios_1t + escanteios_2t_74
    taxa_base = total_escanteios / 74
    minutos_totais = 15 + 5

    resultados = []
    for minuto in range(75, 75 + minutos_totais + 1):
        tempo_restante = (75 + minutos_totais) - minuto
        taxa_ajustada = ajustar_taxa_final_jogo(minuto, taxa_base, diferenca_gols)
        lambda_ = taxa_ajustada * tempo_restante

        p0 = poisson(0, lambda_)
        p1 = poisson(1, lambda_)
        p2 = poisson(2, lambda_)

        p_menos_0_5 = p0
        p_menos_1_5 = p0 + p1
        p_menos_2_5 = p0 + p1 + p2

        def calcular_odd(prob):
            return round(1 / prob, 2) if prob > 0 else float('inf')

        resultados.append({
            'Minuto': minuto,
            'Esc. Proj.': round(lambda_, 1),
            '-0.5': calcular_odd(p_menos_0_5),
            '-1.5': calcular_odd(p_menos_1_5),
            '-2.5': calcular_odd(p_menos_2_5),
            '+0.5': calcular_odd(1 - p0),
            '+1.5': calcular_odd(1 - p0 - p1),
            '+2.5': calcular_odd(1 - p0 - p1 - p2)
        })
    return resultados

# Interface do Streamlit
st.title("Corner Odds")
st.markdown("### Insira os dados para o cálculo:")

escanteios_1t = st.number_input("Escanteios no 1° tempo:", min_value=0, step=1, value=0)
escanteios_2t_74 = st.number_input("Escanteios no 2° tempo até o 74':", min_value=0, step=1, value=0)
diferenca_gols = st.number_input("Diferença de gols até o minuto 75 (time da casa - visitante):", value=0, step=1)

if st.button("Calcular Odds"):
    try:
        resultados = calcular_odds_por_minuto(escanteios_1t, escanteios_2t_74, diferenca_gols)
        tabela_principal = [[
            res['Minuto'],
            res['Esc. Proj.'],
            res['-0.5'],
            res['-1.5'],
            res['-2.5'],
            res['+0.5'],
            res['+1.5'],
            res['+2.5']
        ] for res in resultados if res['Minuto'] <= 90]

        df = pd.DataFrame(tabela_principal, columns=[
            'Minuto', 'Esc. Proj.', '-0.5', '-1.5', '-2.5', '+0.5', '+1.5', '+2.5'
        ])

        # Converter para HTML sem o índice e formatando os floats com 2 casas decimais
        html_table = df.to_html(
            index=False,
            formatters={
                'Esc. Proj.': lambda x: f"{x:.2f}",
                '-0.5': lambda x: f"{x:.2f}",
                '-1.5': lambda x: f"{x:.2f}",
                '-2.5': lambda x: f"{x:.2f}",
                '+0.5': lambda x: f"{x:.2f}",
                '+1.5': lambda x: f"{x:.2f}",
                '+2.5': lambda x: f"{x:.2f}"
            }
        )

        st.markdown("### CORNER ODDS", unsafe_allow_html=True)
        st.markdown(html_table, unsafe_allow_html=True)

    except Exception as e:
        st.error(f"Ocorreu um erro: {e}")